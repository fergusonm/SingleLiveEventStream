apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
    bintrayRepo = 'maven' // Name of the Bintray repo you created
    bintrayName = 'com.mostadequate.liveeventstream:singleliveeventstream' // Bintray package name

    publishedGroupId = 'com.mostadequate.liveeventstream' // Group ID of the SDK which will be added in implementation line of gradle
    artifact = 'singleliveeventstream' // Artifact ID of the SDK which will be added in implementation line of gradle
    libraryVersion = '0.10' // Version of the library you created in Bintray

    libraryName = 'Single Live Event Stream' // It is generally the module name
    libraryDescription = 'A stream of single live events' // Small description of the library

    siteUrl = 'https://github.com/fergusonm/SingleLiveEventStream'
    gitUrl = 'https://github.com/fergusonm/SingleLiveEventStream.git'

    developerId = 'fergusonm'
    developerName = 'Michael Ferguson'
    developerEmail = ''

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]

    //Bintray Credentials
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintrayUsername = properties.getProperty('BINTRAY_USERNAME')
    bintrayUserOrg = properties.getProperty('BINTRAY_ORG')
    bintrayApiKey = properties.getProperty('BINTRAY_API_KEY')
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "0.10"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'

    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"
    implementation "io.reactivex.rxjava2:rxjava:$rx_java_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rx_kotlin_version"
    implementation "com.github.akarnokd:rxjava2-extensions:0.20.10"

    testImplementation 'junit:junit:4.12'
    testImplementation "com.nhaarman:mockito-kotlin:1.6.0"
    testImplementation("androidx.arch.core:core-testing:2.0.0", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}

group = publishedGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId publishedGroupId
            artifactId artifact

            name libraryName
            description libraryDescription
            url siteUrl

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts {
//    archives javadocJar
    archives sourcesJar
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey

    pkg { userOrg = bintrayUserOrg }

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        dryRun = false
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }

//    publish = true // when jcenter link is set up
}